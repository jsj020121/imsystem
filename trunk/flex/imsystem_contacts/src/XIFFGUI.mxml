<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	initialize="onInit( event )" 
	addedToStage="onAddedToStage( event )" 
	resize="onResize( event )">
	<mx:Script>
		<![CDATA[
			import mx.events.ResizeEvent;
			import com.yourpalmark.chat.ChatManager;
			import com.yourpalmark.chat.data.LoginCredentials;
			import com.pixelbreaker.ui.osx.MacMouseWheel;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import org.jivesoftware.xiff.conference.Room;
			import org.jivesoftware.xiff.core.JID;
			import org.jivesoftware.xiff.data.Message;
			import org.jivesoftware.xiff.data.Presence;
			import org.jivesoftware.xiff.data.im.RosterGroup;
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import org.jivesoftware.xiff.events.DisconnectionEvent;
			import org.jivesoftware.xiff.events.IncomingDataEvent;
			import org.jivesoftware.xiff.events.InviteEvent;
			import org.jivesoftware.xiff.events.LoginEvent;
			import org.jivesoftware.xiff.events.MessageEvent;
			import org.jivesoftware.xiff.events.OutgoingDataEvent;
			import org.jivesoftware.xiff.events.PresenceEvent;
			import org.jivesoftware.xiff.events.RegistrationSuccessEvent;
			import org.jivesoftware.xiff.events.RosterEvent;
			import org.jivesoftware.xiff.events.XIFFErrorEvent;
			
			private var chatManager:ChatManager;
			private var messageDict:Dictionary;
			private var roomPopup:RoomPopup;
			
			[Bindable]
			private var errorDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var logDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var presenceDataProvider:Array =	[
															{ label:"Online", data:Presence.SHOW_CHAT },
															{ label:"Free To Chat", data:Presence.SHOW_CHAT },
															{ label:"Away", data:Presence.SHOW_AWAY },
															{ label:"Do Not Disturb", data:Presence.SHOW_DND },
															{ label:"Extended Away", data:Presence.SHOW_XA }
														];
			
			[Bindable]
			private var groupDataProvider:Array =	[
														{ label:"Buddies", data:"Buddies" },
														{ label:"Work", data:"Work" },
														{ label:"Family", data:"Family" }
													];
													
			private var instructionText:String = "Enter your username and password and press connect to log in.\nIf you are not registered, enter a username and password and press register.\nCheck the error log to determine if there was a conflict (ie. someone already has your ID).\nOnce you have successfully registered you may log in."
			
			public function clearLog():void
			{
				logDataProvider.removeAll();
			}
			
			private function setupChatManager():void
			{
				chatManager = new ChatManager();
				chatManager.addEventListener( DisconnectionEvent.DISCONNECT, onDisconnect );
				chatManager.addEventListener( LoginEvent.LOGIN, onLogin );
				chatManager.addEventListener( XIFFErrorEvent.XIFF_ERROR, onXIFFError );
				chatManager.addEventListener( OutgoingDataEvent.OUTGOING_DATA, onOutgoingData );
				chatManager.addEventListener( IncomingDataEvent.INCOMING_DATA, onIncomingData );
				chatManager.addEventListener( RegistrationSuccessEvent.REGISTRATION_SUCCESS, onRegistrationSuccess );
				chatManager.addEventListener( PresenceEvent.PRESENCE, onPresence );
				chatManager.addEventListener( MessageEvent.MESSAGE, onMessage );
				chatManager.addEventListener( InviteEvent.INVITED, onInvited );
				chatManager.addEventListener( RosterEvent.ROSTER_LOADED, onRosterLoaded );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_DENIAL, onSubscriptionDenial );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_REQUEST, onSubscriptionRequest );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_REVOCATION, onSubscriptionRevocation );
				chatManager.addEventListener( RosterEvent.USER_AVAILABLE, onUserAvailable );
				chatManager.addEventListener( RosterEvent.USER_UNAVAILABLE, onUserUnavailable );
			}
			
			private function setupDataProviders():void
			{
				errorLogGrid.dataProvider = errorDataProvider;
				logList.dataProvider = logDataProvider;
				updateGroupBuddyComboBox.dataProvider = chatManager.roster;
				removeBuddyComboBox.dataProvider = chatManager.roster;
				groupComboBox.dataProvider = groupDataProvider;
			}
			
			private function connect():void
			{
				var credentials:LoginCredentials = new LoginCredentials();
				credentials.username = usernameInput.text;
				credentials.password = passwordInput.text;
				chatManager.connect( credentials );
			}
			
			private function addPersonalPopupWindow( userJID:JID, userPresence:String, userStatus:String, message:Message=null ):void
			{
				var popup:PersonalMessagePopup = new PersonalMessagePopup();
				popup.addEventListener( MessageEvent.MESSAGE, onPopupMessage );
				popup.addEventListener( CloseEvent.CLOSE, onPopupClose );
				popup.userPresence = userPresence;
				popup.userStatus = userStatus;
				popup.fromJID = chatManager.currentUserJID;
				popup.toJID = userJID;
				if( message )
				{
					popup.updateMessage( message.body );
				}
				PopUpManager.addPopUp( popup, this, false );
				PopUpManager.centerPopUp( popup );
				messageDict[ userJID.toBareJID() ] = popup;
			}
			
			private function createMUC():void
			{
				roomPopup = new RoomPopup();
				roomPopup.addEventListener( XIFFErrorEvent.XIFF_ERROR, onXIFFError );
				roomPopup.chatManager = chatManager;
				PopUpManager.addPopUp( roomPopup, this );
				PopUpManager.centerPopUp( roomPopup );
			}
			
			private function updateLogScrollPosition():void
			{
				logList.verticalScrollPosition = logList.maxVerticalScrollPosition;
			}
			
			
			private function onInit( event:FlexEvent ):void
			{
				setupChatManager();
				messageDict = new Dictionary();
				instructions.text = instructionText;
				setupDataProviders();
			}
			
			private function onAddedToStage( event:Event ):void
			{
				MacMouseWheel.setup( stage );
			}
			
			private function onResize( event:ResizeEvent ):void
			{
				if( roomPopup ) roomPopup.invalidateSize();
			}
			
			private function onDisconnect( event:DisconnectionEvent ):void
			{
				createMUCButton.enabled = false;
				groupComboBox.enabled = false;
				rosterGrid.dataProvider = null;
				updateGroupBuddyComboBox.enabled = false;
				removeBuddyComboBox.enabled = false;
				presenceStateComboBox.enabled = false;
				disconnectButton.enabled = false;
				connectButton.enabled = true;
				registerButton.enabled = true;
			}
			
			private function onLogin( event:LoginEvent ):void
			{
				createMUCButton.enabled = true;
				groupComboBox.enabled = true;
				updateGroupBuddyComboBox.enabled = true;
				removeBuddyComboBox.enabled = true;
				presenceStateComboBox.enabled = true;
				presenceStateComboBox.dataProvider = presenceDataProvider;
				disconnectButton.enabled = true;
				connectButton.enabled = false;
				registerButton.enabled = false;
			}
			
			private function onXIFFError( event:XIFFErrorEvent ):void
			{
				var error:Object = { errorCode:event.errorCode, errorCondition:event.errorCondition, errorMessage:event.errorMessage, errorType:event.errorType };
				errorDataProvider.addItem( error );
				logDataProvider.addItem( "XIFFErrorEvent " + "onXIFFError: " + "type:" + event.errorType + "  message:" + event.errorMessage );
				callLater( updateLogScrollPosition );
			}
			
			private function onOutgoingData( event:OutgoingDataEvent ):void
			{
				logDataProvider.addItem( ">>outgoing: " + event.data.toString() );
				callLater( updateLogScrollPosition );
			}
			
			private function onIncomingData( event:IncomingDataEvent ):void
			{
				logDataProvider.addItem( ">>incoming: " + event.data.toString() );
				callLater( updateLogScrollPosition );
			}
			
			private function onRegistrationSuccess( event:RegistrationSuccessEvent ):void
			{
				connect();
				
				var generalPopup:GeneralPopup = new GeneralPopup();
				generalPopup.message = "Registration was successful. You will now be logged in. You may want to add some contacts at this point.";
				PopUpManager.addPopUp( generalPopup, this );
				PopUpManager.centerPopUp( generalPopup );
			}
			
			private function onPresence( event:PresenceEvent ):void
			{
				var presence:Presence = event.data[ 0 ] as Presence;
				var presenceType:String;
				
				switch( presence.type )
				{
					case Presence.SHOW_CHAT :
					case Presence.SHOW_AWAY :
					case Presence.SHOW_DND :
					case Presence.SHOW_XA :
						presenceType = "Presence.AVAILABLE_TYPE";
						break;
					case Presence.UNAVAILABLE_TYPE :
						presenceType = "Presence.UNAVAILABLE_TYPE";
						break;
					case Presence.UNSUBSCRIBE_TYPE :
						presenceType = "Presence.UNSUBSCRIBE_TYPE";
						break;
					case Presence.PROBE_TYPE :
						presenceType = "Presence.PROBE_TYPE";
						break;
					default :
						break;
				}
				
				logDataProvider.addItem( "PresenceEvent " + presenceType + ": " + presence.from );
				callLater( updateLogScrollPosition );
			}
			
			private function onMessage( event:MessageEvent ):void
			{
				var message:Message = event.data as Message;
				
				logDataProvider.addItem( ">>MESSAGE HANDLER: "+ event.data );
				logDataProvider.addItem( "TYPE: "+ message.type );
				
				if( message.type == Message.CHAT_TYPE )
				{
					if( messageDict[ message.from.toBareJID() ] )
					{
						var popup:PersonalMessagePopup = messageDict[ message.from.toBareJID() ] as PersonalMessagePopup;
						popup.updateMessage( message.body );
					}
					else
					{
						try
						{
							var ri:RosterItemVO = RosterItemVO.get( message.from, false );
							addPersonalPopupWindow( message.from, ri.show, ri.status, message );
						}
						catch( event:Error )
						{
							logDataProvider.addItem( "Message from user not in roster." );
						}
					}
				}
				
				callLater( updateLogScrollPosition );
			}
			
			private function onInvited( event:InviteEvent ):void
			{
				var acceptDeclinePopup:AcceptDeclinePopup = new AcceptDeclinePopup();
				acceptDeclinePopup.additionalData = { room:event.room, reason:event.reason, from:event.from };
				acceptDeclinePopup.message = event.from + " requests you to join a room. Reason: " + event.reason;
				acceptDeclinePopup.addEventListener( AcceptDeclinePopup.ACCEPT, onInviteAccept );
				acceptDeclinePopup.addEventListener( AcceptDeclinePopup.DECLINE, onInviteDecline );
				PopUpManager.addPopUp( acceptDeclinePopup, this );
				PopUpManager.centerPopUp( acceptDeclinePopup );
				
				logDataProvider.addItem( ">>handle Invitation to room: " + ( Room( event.room ).roomJID as JID ).bareJid );
				callLater( updateLogScrollPosition );
			}
			
			private function onInviteAccept( event:Event ):void
			{
				var acceptDeclinePopup:AcceptDeclinePopup = event.target as AcceptDeclinePopup;
				var room:Room = acceptDeclinePopup.additionalData.room as Room;
				PopUpManager.removePopUp( acceptDeclinePopup );
				roomPopup = new RoomPopup();
				roomPopup.moderator = false;
				roomPopup.chatManager = chatManager;
				roomPopup.room = room;
				PopUpManager.addPopUp( roomPopup, this );
				PopUpManager.centerPopUp( roomPopup );
			}
			
			private function onInviteDecline( event:Event ):void
			{
				var acceptDeclinePopup:AcceptDeclinePopup = event.target as AcceptDeclinePopup;
				var room:Room = acceptDeclinePopup.additionalData.room as Room;
				room.decline( room.userJID, "I dont want to join" );
				PopUpManager.removePopUp( acceptDeclinePopup );
			}
			
			private function onRosterLoaded( event:RosterEvent ):void
			{
				rosterGrid.dataProvider = chatManager.roster;
			}
			
			private function onSubscriptionDenial( event:RosterEvent ):void
			{
				var generalPopup:GeneralPopup = new GeneralPopup();
				generalPopup.message = event.jid + " denied you request to subscribe to their presence."
				PopUpManager.addPopUp( generalPopup, this );
				PopUpManager.centerPopUp( generalPopup );
			}
			
			private function onSubscriptionRequest( event:RosterEvent ):void
			{
				if( !chatManager.roster.contains( RosterItemVO.get( event.jid, false ) ) )
				{
					var acceptDeclinePopup:AcceptDeclinePopup = new AcceptDeclinePopup();
					acceptDeclinePopup.addEventListener( AcceptDeclinePopup.ACCEPT, onSubscriptionAccept );
					acceptDeclinePopup.addEventListener( AcceptDeclinePopup.DECLINE, onSubscriptionDecline );
					acceptDeclinePopup.jid = event.jid;
					acceptDeclinePopup.message = "The user " + event.jid + " wishes to add you to their roster and see your presence online.";
					PopUpManager.addPopUp( acceptDeclinePopup, this, false );
					PopUpManager.centerPopUp( acceptDeclinePopup );
				}
			}
			
			private function onSubscriptionAccept( event:Event ):void
			{
				var acceptDeclinePopup:AcceptDeclinePopup = event.target as AcceptDeclinePopup;
				chatManager.roster.grantSubscription( acceptDeclinePopup.jid, true );
				PopUpManager.removePopUp( acceptDeclinePopup );
			}
			
			private function onSubscriptionDecline( event:Event ):void
			{
				var acceptDeclinePopup:AcceptDeclinePopup = event.target as AcceptDeclinePopup;
				chatManager.roster.denySubscription( acceptDeclinePopup.jid );
				PopUpManager.removePopUp( acceptDeclinePopup );
			}
			
			private function onSubscriptionRevocation( event:RosterEvent ):void
			{
				logDataProvider.addItem( "RosterEvent.SUBSCRIPTION_REVOCATION: " + event.jid );
				callLater( updateLogScrollPosition );
			}
			
			private function onUserAvailable( event:RosterEvent ):void
			{
				logDataProvider.addItem( "RosterEvent.USER_AVAILABLE: " + event.jid );
				callLater( updateLogScrollPosition );
			}
			
			private function onUserUnavailable( event:RosterEvent ):void
			{
				logDataProvider.addItem( "RosterEvent.USER_UNAVAILABLE: " + event.jid );
				callLater( updateLogScrollPosition );
			}
			
			private function onPopupMessage( event:MessageEvent ):void
			{
				var message:Message = event.data as Message;
				chatManager.connection.send( message );
			}
			
			private function onPopupClose( event:CloseEvent ):void
			{
				var popup:PersonalMessagePopup = event.target as PersonalMessagePopup;
				delete messageDict[ popup.toJID.toBareJID() ];
				PopUpManager.removePopUp( popup );
			}
			
			private function onServerInputChange():void
			{
				ChatManager.serverLocation = serverInput.text;
			}
			
			private function onUpdateGroupBuddyChange( event:ListEvent ):void
			{
				var rosterItem:RosterItemVO = RosterItemVO( updateGroupBuddyComboBox.selectedItem );
				var groups:Array = chatManager.roster.getContainingGroups( rosterItem );
				var group:RosterGroup = RosterGroup( groups[ 0 ] );
				
				for( var i:int=0; i<groupDataProvider.length; i++ )
				{
					var groupObject:Object = groupDataProvider[ i ];
					var groupLabel:String = groupObject.label;
					if( groupLabel == group.label )
					{
						groupComboBox.selectedIndex = i;
						break;
					}
				}
			}
			
			private function onPresenceStateChange( event:ListEvent ):void
			{
				chatManager.updatePresence( presenceStateComboBox.value.toString(), presenceStateComboBox.text );
			}
			
			private function onConnectClick( event:MouseEvent ):void
			{
				connect();
			}
			
			private function onCreateMUCClick( event:MouseEvent ):void
			{
				createMUC();
			}
			
			private function onClearLogClick( event:MouseEvent ):void
			{
				clearLog();
			}
			
			private function onRegisterClick( event:MouseEvent ):void
			{
				var credentials:LoginCredentials = new LoginCredentials();
				credentials.username = usernameInput.text;
				credentials.password = passwordInput.text;
				chatManager.register( credentials );
			}
			
			private function onDisconnectClick( event:MouseEvent ):void
			{
				chatManager.disconnect();
			}
			
			private function onRosterItemClick( event:ListEvent ):void
			{
				var rosterItem:RosterItemVO = chatManager.roster.getItemAt( event.rowIndex ) as RosterItemVO;
				if( messageDict[ rosterItem.jid.toBareJID() ] )
				{
					var win:PersonalMessagePopup = messageDict[ rosterItem.jid.toBareJID() ] as PersonalMessagePopup;
					PopUpManager.bringToFront( win );
				}
				else
				{
					addPersonalPopupWindow( rosterItem.jid, rosterItem.show, rosterItem.status );
				}	
			}
			
			private function onUpdateGroupClick( event:MouseEvent ):void
			{
				if( updateGroupBuddyComboBox.selectedIndex != -1 )
				{
					var rosterItem:RosterItemVO = RosterItemVO( updateGroupBuddyComboBox.selectedItem );
					chatManager.updateGroup( rosterItem, groupComboBox.selectedLabel );
					updateGroupBuddyComboBox.selectedIndex = 0;
				}
				else
				{
					var generalPopup:GeneralPopup = new GeneralPopup();
					generalPopup.message = "You must select a buddy to update their group.";
					PopUpManager.addPopUp( generalPopup, this );
					PopUpManager.centerPopUp( generalPopup );
				}
			}
			
			private function onAddBuddyClick( event:MouseEvent ):void
			{
				var jid:JID = new JID( buddyJIDInput.text + "@" + ChatManager.serverLocation );
				var message:String;
				
				if( ChatManager.isValidJID( jid ) )
				{
					message = "A request has been sent to the user. You will see them online if they accept your request.";
					chatManager.addBuddy( jid );
				}
				else
				{
					message = "The ID of the user you tried to add did not validate. Try just adding nick.";
				}
				
				var generalPopup:GeneralPopup = new GeneralPopup();
				generalPopup.message = message;
				PopUpManager.addPopUp( generalPopup, this );
				PopUpManager.centerPopUp( generalPopup );
			}
			
			private function onRemoveBuddyClick( event:MouseEvent ):void
			{
				if( removeBuddyComboBox.selectedIndex != -1 )
				{
					var rosterItem:RosterItemVO = RosterItemVO( removeBuddyComboBox.selectedItem );
					chatManager.removeBuddy( rosterItem );
					removeBuddyComboBox.selectedIndex = 0;
				}
				else
				{
					var generalPopup:GeneralPopup = new GeneralPopup();
					generalPopup.message = "You must select a buddy to remove.";
					PopUpManager.addPopUp( generalPopup, this );
					PopUpManager.centerPopUp( generalPopup );
				}
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" verticalGap="20" paddingTop="20" paddingRight="20" paddingBottom="20" paddingLeft="20">
		<mx:VBox width="100%" height="15%" verticalGap="10">
			<mx:Label text="XIFF GUI V 2.0" width="100%" height="5%" fontWeight="bold" fontSize="12" />
			<mx:HBox width="100%" height="10%" horizontalGap="30">
				<mx:HBox width="50%" height="100%">
					<mx:VBox width="40%" height="100%" verticalGap="10">
						<mx:VBox width="100%" verticalGap="2">
							<mx:Label text="Username" width="100%" enabled="true" fontWeight="bold" />
							<mx:TextInput id="usernameInput" width="100%" editable="true" enabled="true" />
						</mx:VBox>
						<mx:VBox width="100%" verticalGap="2">
							<mx:Label text="Password" width="100%" enabled="true" fontWeight="bold" />
							<mx:TextInput id="passwordInput" width="100%" editable="true" enabled="true" displayAsPassword="true" />
						</mx:VBox>
					</mx:VBox>
					<mx:VBox width="60%" height="100%" verticalGap="10">
						<mx:VBox width="100%" verticalGap="2">
							<mx:Label text="Server domain" width="100%" enabled="true" fontWeight="bold" />
							<mx:TextInput id="serverInput" width="100%" editable="true" enabled="true" change="onServerInputChange()" displayAsPassword="false" text="{ChatManager.serverLocation}" />
						</mx:VBox>
						<mx:Spacer height="100%" />
						<mx:HBox width="100%" height="25">
							<mx:Button label="Connect" width="100%" height="100%" enabled="true" id="connectButton" click="onConnectClick( event )"/>
							<mx:Button label="Register" width="100%" height="100%" enabled="true" id="registerButton" click="onRegisterClick( event )"/>
							<mx:Button label="Disconnect" width="100%" height="100%" enabled="false" click="onDisconnectClick( event )" id="disconnectButton"/>
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
				<mx:Text id="instructions" width="50%" height="100%" fontStyle="italic" leading="6" />
			</mx:HBox>
		</mx:VBox>
		<mx:HBox width="100%" height="45%">
			<mx:VBox width="40%" height="100%">
				<mx:HBox width="100%" height="50%">
					<mx:TitleWindow title="Add Buddy" width="50%" height="100%">
						<mx:VBox width="100%" height="100%" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5">
							<mx:VBox width="100%" height="100%" verticalGap="2" verticalAlign="middle">
								<mx:TextInput id="buddyJIDInput" width="100%" editable="true" enabled="true"/>
							</mx:VBox>
							<mx:Button id="addBuddyButton" label="Add Buddy" width="100%" enabled="true" click="onAddBuddyClick( event )"/>
						</mx:VBox>
					</mx:TitleWindow>
					<mx:TitleWindow title="Remove Buddy" width="50%" height="100%">
						<mx:VBox width="100%" height="100%" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5">
							<mx:VBox width="100%" height="100%" verticalGap="2" verticalAlign="middle">
								<mx:ComboBox id="removeBuddyComboBox" labelField="displayName" width="100%" enabled="false" />
							</mx:VBox>
							<mx:Button id="removeBuddyButton" label="Remove Buddy" width="100%" enabled="true" click="onRemoveBuddyClick( event )"/>
						</mx:VBox>
					</mx:TitleWindow>
				</mx:HBox>
				<mx:HBox width="100%" height="50%">
					<mx:TitleWindow title="Update Buddy Group" width="50%" height="100%">
						<mx:VBox width="100%" height="100%" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5">
							<mx:VBox width="100%" height="100%" verticalGap="2">
								<mx:Label text="Select Buddy" width="100%" enabled="true" fontWeight="bold"/>
								<mx:ComboBox id="updateGroupBuddyComboBox" labelField="displayName" width="100%" enabled="false" change="onUpdateGroupBuddyChange( event )" />
							</mx:VBox>
							<mx:VBox width="100%" height="100%" verticalGap="2">
								<mx:Label text="Select Buddy Group" width="100%" enabled="true" fontWeight="bold"/>
								<mx:ComboBox id="groupComboBox" width="100%" enabled="false" selectedIndex="0" />
							</mx:VBox>
							<mx:Button id="updateGroupButton" label="Update Buddy Group" width="100%" enabled="true" click="onUpdateGroupClick( event )"/>
						</mx:VBox>
					</mx:TitleWindow>
					<mx:VBox width="50%" height="100%">
						<mx:TitleWindow title="Change Presence" width="100%" height="100%">
							<mx:VBox width="100%" height="100%" verticalGap="2">
								<mx:Label text="Presence" width="100%" enabled="true" fontWeight="bold"/>
								<mx:ComboBox id="presenceStateComboBox" width="100%" enabled="false" change="onPresenceStateChange( event )" />
							</mx:VBox>
						</mx:TitleWindow>
						<mx:TitleWindow title="Create Multi User Chat Room" width="100%">
							<mx:Button id="createMUCButton" label="Create" width="100%" enabled="false" click="onCreateMUCClick( event )"/>
						</mx:TitleWindow>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="60%" height="100%">
				<mx:TitleWindow title="Roster" width="100%" height="50%">
					<mx:DataGrid id="rosterGrid" width="100%" height="100%" editable="false" enabled="true" itemClick="onRosterItemClick( event )" />
				</mx:TitleWindow>
				<mx:TitleWindow title="Errors" width="100%" height="50%">
					<mx:DataGrid id="errorLogGrid" width="100%" height="100%" allowMultipleSelection="true" liveScrolling="true" editable="false" enabled="true" resizableColumns="true">
						<mx:columns>
							<mx:DataGridColumn headerText="Code" dataField="errorCode" />
							<mx:DataGridColumn headerText="Condition" dataField="errorCondition" />
							<mx:DataGridColumn headerText="Message" dataField="errorMessage" />
							<mx:DataGridColumn headerText="Type" dataField="errorType" />
						</mx:columns>
					</mx:DataGrid>
				</mx:TitleWindow>
			</mx:VBox>
		</mx:HBox>
		<mx:VBox width="100%" height="40%">
			<mx:HBox width="100%">
				<mx:Label text="Log" fontWeight="bold" />
				<mx:Spacer width="100%" />
				<mx:Button id="clearLogButton" label="Clear" enabled="true" click="onClearLogClick( event )" />
			</mx:HBox>
			<mx:List id="logList" alternatingItemColors="[ 0xEEEEEE, 0xFFFFFF ]" variableRowHeight="true" wordWrap="true" width="100%" height="100%" />
		</mx:VBox>
	</mx:VBox>
</mx:Canvas>